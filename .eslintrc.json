{
    "extends": [ // Enables a subset of core rules that report common problems
      "eslint:all", // Enable all core rules in the currently installed version of ESLint
      "plugin:react/all", // Enable all core rules in the currently installed version of React plugin for ESLint
      "prettier", // Turns off all rules that are unnecessary or might conflict with prettier
      "prettier/react" // Turns off all rules that are unnecessary or might conflict with prettier
    ],
    "env": { // An environment defines global variables that are predefined
        "browser": true, // Browser global variables
        "node": true, // Node.js global variables and Node.js scoping
        "commonjs": true, // CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack)
        "shared-node-browser": true, // Globals common to both Node and Browser
        "es6": true, // Enable all ECMAScript 6 features except for modules (this automatically sets the ecmaVersion parser option to 6)
        "mongo": true, // MongoDB global variables
        "shelljs": true, // ShellJS global variables
        "phantomjs": true, // PhantomJS global variables
        "jest": true // Jest global variables
    },
    "parserOptions": { // Allows you to specify the JavaScript language options you want to support
        "ecmaVersion": 2016, // Specify the version of ECMAScript syntax you want to use
        "ecmaFeatures": { // An object indicating which additional language features you’d like to use
            "jsx": true // Enable 'JSX'
        },
        "sourceType": "module" // Set to "script" (default) or "module" if your code is in ECMAScript modules
    },
    "plugins": [ // Third-party plugins
        "react" // Enable 'React'
    ],
    "parser": "babel-eslint", // Using Babel as the parser
    "rules": { // Modify which rules your project uses
        // Possible Errors - These rules relate to possible syntax or logic errors in JavaScript code
        "no-await-in-loop": "error", // Disallow await inside of loops
        "no-compare-neg-zero": "error", // Disallow comparing against -0
        "no-cond-assign": ["error", "except-parens"], // Disallow assignment operators in conditional expressions
        "no-console": "off", // Disallow the use of console
        "no-constant-condition": "error", // Disallow constant expressions in conditions
        "no-control-regex": "error", // Disallow control characters in regular expressions
        "no-debugger": "error", // Disallow the use of debugger
        "no-dupe-args": "error", // Disallow duplicate arguments in function definitions
        "no-dupe-keys": "error", // Disallow duplicate keys in object literals
        "no-duplicate-case": "error", // Disallow duplicate case labels
        "no-empty-character-class": "error", // Disallow empty character classes in regular expressions
        "no-empty": "error", // Disallow empty block statements
        "no-ex-assign": "error", // Disallow reassigning exceptions in catch clauses
        "no-extra-boolean-cast": "error", // Disallow unnecessary boolean casts
        "no-extra-parens": ["error", "all"], // Disallow unnecessary parentheses
        "no-extra-semi": "error", // Disallow unnecessary semicolons
        "no-func-assign": "error", // Disallow reassigning function declarations
        "no-inner-declarations": ["error", "both"], // Disallow variable or function declarations in nested blocks
        "no-invalid-regexp": "error", // Disallow invalid regular expression strings in RegExp constructors
        "no-irregular-whitespace": "error", // Disallow irregular whitespace outside of strings and comments
        "no-obj-calls": "error", // Disallow calling global object properties as functions
        "no-prototype-builtins": "error", // Disallow calling some Object.prototype methods directly on objects
        "no-regex-spaces": "error", // Disallow multiple spaces in regular expressions
        "no-sparse-arrays": "error", // Disallow sparse arrays
        "no-template-curly-in-string": "error", // Disallow template literal placeholder syntax in regular strings
        "no-unexpected-multiline": "error", // Disallow confusing multiline expressions
        "no-unreachable": "error", // Disallow unreachable code after return, throw, continue, and break statements
        "no-unsafe-finally": "error", // Disallow control flow statements in finally blocks
        "no-unsafe-negation": "error", // Disallow negating the left operand of relational operators
        "use-isnan": "error", // Require calls to isNaN() when checking for NaN
        "valid-jsdoc": "error", // Enforce valid JSDoc comments
        "valid-typeof": "error", // Enforce comparing typeof expressions against valid strings

        // Best Practices - These rules relate to better ways of doing things to help you avoid problems
        "accessor-pairs": "error", // Enforces getter/setter pairs in objects
        "array-callback-return": "error", // Enforces return statements in callbacks of array’s methods
        "block-scoped-var": "error", // Treat var as Block Scoped
        "class-methods-use-this": "off", // Enforce that class methods utilize this
        "complexity": ["error", 4], // Limit Cyclomatic Complexity
        "consistent-return": "error", // Require return statements to either always or never specify values
        "curly": ["error", "all"], // Require Following Curly Brace Conventions
        "default-case": "error", // Require Default Case in Switch Statements
        "dot-location": ["error", "property"], // Enforce newline before and after dot
        "dot-notation": "error", // Require Dot Notation
        "eqeqeq": ["error", "always"], // Require === and !==
        "guard-for-in": "error", // Require Guarding for-in
        "no-alert": "off", // Disallow Use of Alert
        "no-caller": "error", // Disallow Use of caller/callee
        "no-case-declarations": "error", // Disallow lexical declarations in case/default clauses
        "no-div-regex": "error", // Disallow Regexs That Look Like Division
        "no-else-return": "error", // Disallow return before else
        "no-empty-function": "error", // Disallow empty functions
        "no-empty-pattern": "error", // Disallow empty destructuring patterns
        "no-eq-null": "error", // Disallow Null Comparisons
        "no-eval": "error", // Disallow eval()
        "no-extend-native": "error", // Disallow Extending of Native Objects
        "no-extra-bind": "error", // Disallow unnecessary function binding
        "no-extra-label": "error", // Disallow Unnecessary Labels
        "no-fallthrough": "error", // Disallow Case Statement Fallthrough
        "no-floating-decimal": "error", // Disallow Floating Decimals
        "no-global-assign": "error", // Disallow assignment to native objects or read-only global variables
        "no-implicit-coercion": "error", // Disallow the type conversion with shorter notations
        "no-implicit-globals": "error", // Disallow variable and function declarations in the global scope
        "no-implied-eval": "error", // Disallow Implied eval()
        "no-invalid-this": "error", // Disallow this keywords outside of classes or class-like objects
        "no-iterator": "error", // Disallow Iterator
        "no-labels": "error", // Disallow Labeled Statements
        "no-lone-blocks": "error", // Disallow Unnecessary Nested Blocks
        "no-loop-func": "error", // Disallow Functions in Loops
        "no-magic-numbers": "off", // Disallow Magic Numbers
        "no-multi-spaces": "error", // Disallow multiple spaces
        "no-multi-str": "error", // Disallow Multiline Strings
        "no-new-func": "error", // Disallow Function Constructor
        "no-new-wrappers": "error", // Disallow Primitive Wrapper Instances
        "no-new": "error", // Disallow new For Side Effects
        "no-octal-escape": "error", // Disallow octal escape sequences in string literals
        "no-octal": "error", // Disallow octal literals
        "no-param-reassign": ["error", { "props": false }], // Disallow Reassignment of Function Parameters
        "no-proto": "error", // Disallow Use of __proto__
        "no-redeclare": ["error", { "builtinGlobals": true }], // Disallow variable redeclaration
        "no-restricted-properties": "off", // Disallow certain object properties
        "no-return-assign": ["error", "always"], // Disallow Assignment in return Statement
        "no-return-await": "error", // Disallows unnecessary return await
        "no-script-url": "error", // Disallow Script URLs
        "no-self-assign": "error", // Disallow Self Assignment
        "no-self-compare": "error", // Disallow Self Compare
        "no-sequences": "error", // Disallow Use of the Comma Operator
        "no-throw-literal": "error", // Restrict what can be thrown as an exception
        "no-unmodified-loop-condition": "error", // Disallow unmodified conditions of loops
        "no-unused-expressions": "error", // Disallow Unused Expressions
        "no-unused-labels": "error", // Disallow Unused Labels
        "no-useless-call": "error", // Disallow unnecessary .call() and .apply()
        "no-useless-concat": "error", // Disallow unnecessary concatenation of strings
        "no-useless-escape": "error", // Disallow unnecessary escape usage
        "no-useless-return": "error", // Disallow redundant return statements
        "no-void": "error", // Disallow use of the void operator
        "no-warning-comments": "off", // Disallow Warning Comments
        "no-with": "error", // Disallow with statements
        "prefer-promise-reject-errors": ["error", { "allowEmptyReject": true }], // Require using Error objects as Promise rejection reasons
        "radix": ["error", "always"], // Require Radix Parameter
        "require-await": "error", // Disallow async functions which have no await expression
        "vars-on-top": "error", // Require Variable Declarations to be at the top of their scope
        "wrap-iife": ["error", "outside", { "functionPrototypeMethods": true }], // Require IIFEs to be Wrapped
        "yoda": ["error", "never"], // Require or disallow Yoda Conditions

        // Strict Mode - These rules relate to strict mode directives
        "strict": ["error", "never"], // Require or disallow strict mode directives

        // Variables - These rules relate to variable declarations
        "init-declarations": "off", // Require or disallow initialization in variable declarations
        "no-catch-shadow": "off", // Disallow Shadowing of Variables Inside of catch
        "no-delete-var": "error", // Disallow deleting variables
        "no-label-var": "error", // Disallow Labels That Are Variables Names
        "no-restricted-globals": ["error", "event"], // Disallow specific global variables
        "no-shadow-restricted-names": "error", // Disallow Shadowing of Restricted Names
        "no-shadow": ["error", { "builtinGlobals": false, "hoist": "all", "allow": [] }], // Disallow variable declarations from shadowing variables declared in the outer scope
        "no-undef-init": "error", // Disallow Initializing to undefined
        "no-undef": ["error", { "typeof": true }], // Disallow Undeclared Variables
        "no-undefined": "error", // Disallow Use of undefined Variable
        "no-unused-vars": ["warn", { "vars": "all", "args": "after-used", "caughtErrors": "all" }], // Disallow Unused Variables
        "no-use-before-define": ["error", { "functions": true, "classes": true }], // Disallow Early Use

        // Node.js and CommonJS - These rules relate to code running in Node.js, or in browsers with CommonJS
        "callback-return": ["error", ["callback", "cb", "next", "done", "send.error", "send.success"]], // Enforce Return After Callback
        "global-require": "off", // Enforce require() on the top-level module scope
        "handle-callback-err": ["error", "^.*(e|E)rr"], // Enforce Callback Error Handling
        "no-mixed-requires": ["error", { "grouping": false, "allowCall": false }], // Disallow require calls to be mixed with regular variable declarations
        "no-new-require": "error", // Disallow new require
        "no-path-concat": "error", // Disallow string concatenation when using __dirname and __filename
        "no-process-env": "off", // Disallow process.env
        "no-process-exit": "error", // Disallow process.exit()
        "no-restricted-modules": "off", // Disallow Node.js modules
        "no-sync": "off", // Disallow Synchronous Methods

        // Stylistic Issues - These rules relate to style guidelines, and are therefore quite subjective
        "array-bracket-spacing": ["error", "never", { "singleValue": false, "objectsInArrays": false, "arraysInArrays": false }], // Enforce consistent spacing inside array brackets
        "block-spacing": ["error", "always"], // Enforce consistent spacing inside single-line blocks
        "brace-style": ["error", "1tbs", { "allowSingleLine": true }], // Enforce consistent brace style for blocks
        "camelcase": "off", // Enforce camelcase naming convention
        "capitalized-comments": "off", // Enforce or disallow capitalization of the first letter of a comment
        "comma-dangle": ["error", "never"], // Require or disallow trailing commas
        "comma-spacing": ["error", { "before": false, "after": true }], // Enforce consistent spacing before and after commas
        "comma-style": ["error", "last"], // Enforce consistent comma style
        "computed-property-spacing": ["error", "never"], // Enforce consistent spacing inside computed property brackets
        "consistent-this": ["error", "that"], // Enforce consistent naming when capturing the current execution context
        "eol-last": "error", // Require or disallow newline at the end of files
        "func-call-spacing": ["error", "never"], // Require or disallow spacing between function identifiers and their invocations
        "func-name-matching": ["error", "always"], // Require function names to match the name of the variable or property to which they are assigned
        "func-names": ["error", "as-needed"], // Require or disallow named function expressions
        "func-style": ["error", "expression", { "allowArrowFunctions": true }], // Enforce the consistent use of either function declarations or expressions
        "id-blacklist": "off", // Disallow specified identifiers
        "id-length": "off", // Enforce minimum and maximum identifier lengths
        "id-match": "off", // Require identifiers to match a specified regular expression
        "indent": ["error", 2, { "VariableDeclarator": 3 }], // Enforce consistent indentation
        "jsx-quotes": ["error", "prefer-double"], // Enforce the consistent use of either double or single quotes in JSX attributes
        "key-spacing": ["error", { "beforeColon": false, "afterColon": true, "mode": "strict" }], // Enforce consistent spacing between keys and values in object literal properties
        "keyword-spacing": ["error", { "before": true, "after": true }], // Enforce consistent spacing before and after keywords
        "line-comment-position": "off", // Enforce position of line comments
        "linebreak-style": "off", // Enforce consistent linebreak style
        "lines-around-comment": "off", // Require empty lines around comments
        "lines-around-directive": ["error", "always"], // Require or disallow newlines around directives
        "max-depth": ["error", 2], // Enforce a maximum depth that blocks can be nested
        "max-len": "off", // Enforce a maximum line length
        "max-lines": ["error", { "max": 300, "skipBlankLines": true, "skipComments": true }], // Enforce a maximum number of lines per file
        "max-nested-callbacks": ["error", 2], // Enforce a maximum depth that callbacks can be nested
        "max-params": "off", // Enforce a maximum number of parameters in function definitions
        "max-statements-per-line": ["error", { "max": 1 }], // Enforce a maximum number of statements allowed per line
        "max-statements": "off", // Enforce a maximum number of statements allowed in function blocks
        "multiline-ternary": "off", // Enforce newlines between operands of ternary expressions
        "new-cap": ["error", { "newIsCap": true, "capIsNew": false }], // Require constructor names to begin with a capital letter
        "new-parens": "error", // Require parentheses when invoking a constructor with no arguments
        "newline-after-var": ["error", "always"], // Require or disallow an empty line after variable declarations
        "newline-before-return": "error", // Require an empty line before return statements
        "newline-per-chained-call": ["error", { "ignoreChainWithDepth": 3 }], // Require a newline after each call in a method chain
        "no-array-constructor": "error", // Disallow Array constructors
        "no-bitwise": "error", // Disallow bitwise operators
        "no-continue": "off", // Disallow continue statements
        "no-inline-comments": "off", // Disallow inline comments after code
        "no-lonely-if": "error", // Disallow if statements as the only statement in else blocks
        "no-mixed-operators": "error", // Disallow mixed binary operators
        "no-mixed-spaces-and-tabs": ["error", "smart-tabs"], // Disallow mixed spaces and tabs for indentation
        "no-multi-assign": "error", // Disallow use of chained assignment expressions
        "no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 1, "maxBOF": 1 }], // Disallow multiple empty lines
        "no-negated-condition": "off", // Disallow negated conditions
        "no-nested-ternary": "error", // Disallow nested ternary expressions
        "no-new-object": "error", // Disallow Object constructors
        "no-plusplus": "off", // Disallow the unary operators ++ and --
        "no-restricted-syntax": "off", // Disallow specified syntax
        "no-tabs": "off", // Disallow all tabs
        "no-ternary": "off", // Disallow ternary operators
        "no-trailing-spaces": ["error", { "skipBlankLines": false }], // Disallow trailing whitespace at the end of lines
        "no-underscore-dangle": "off", // Disallow dangling underscores in identifiers
        "no-unneeded-ternary": ["error", { "defaultAssignment": false }], // Disallow ternary operators when simpler alternatives exist
        "no-whitespace-before-property": "error", // Disallow whitespace before properties
        "object-curly-newline": "off", // Enforce consistent line breaks inside braces
        "object-curly-spacing": ["error", "always", { "arraysInObjects": true, "objectsInObjects": true }], // Enforce consistent spacing inside braces
        "object-property-newline": "off", // Enforce placing object properties on separate lines
        "one-var-declaration-per-line": "off", // Require or disallow newlines around variable declarations
        "one-var": "off", // Enforce variables to be declared either together or separately in functions
        "operator-assignment": ["error", "always"], // Require or disallow assignment operator shorthand where possible
        "operator-linebreak": "off", // Enforce consistent linebreak style for operators
        "padded-blocks": "off", // Require or disallow padding within blocks
        "quote-props": ["error", "as-needed"], // Require quotes around object literal property names
        "quotes": ["error", "single", { "avoidEscape": true }], // Enforce the consistent use of either backticks, double, or single quotes
        "require-jsdoc": "off", // Require JSDoc comments
        "semi-spacing": ["error", { "before": false, "after": true }], // Enforce consistent spacing before and after semicolons
        "semi": ["error", "always"], // Require or disallow semicolons instead of ASI
        "sort-keys": "off", // Require object keys to be sorted
        "sort-vars": "off", // Require variables within the same declaration block to be sorted
        "space-before-blocks": ["error", "always"], // Enforce consistent spacing before blocks
        "space-before-function-paren": ["error", "never"], // Enforce consistent spacing before function definition opening parenthesis
        "space-in-parens": ["error", "never"], // Enforce consistent spacing inside parentheses
        "space-infix-ops": "error", // Require spacing around infix operators
        "space-unary-ops": ["error", { "words": true, "nonwords": false }], // Enforce consistent spacing before or after unary operators
        "spaced-comment": "off", // Enforce consistent spacing after the // or /* in a comment
        "template-tag-spacing": ["error", "never"], // Require or disallow spacing between template tags and their literals
        "unicode-bom": ["error", "never"], // Require or disallow Unicode byte order mark (BOM)
        "wrap-regex": "error", // Require parenthesis around regex literals

        // ECMAScript 6 - These rules relate to ES6, also known as ES2015
        "arrow-body-style": "off", // Require braces around arrow function bodies
        "arrow-parens": ["error", "as-needed", { "requireForBlockBody": false }], // Require parentheses around arrow function arguments
        "arrow-spacing": ["error", { "before": true, "after": true }], // Enforce consistent spacing before and after the arrow in arrow functions
        "constructor-super": "error", // Require super() calls in constructors
        "generator-star-spacing": ["error", {"before": false, "after": true}], // Enforce consistent spacing around * operators in generator functions
        "no-class-assign": "error", // Disallow reassigning class members
        "no-confusing-arrow": "error", // Disallow arrow functions where they could be confused with comparisons
        "no-const-assign": "error", // Disallow reassigning const variables
        "no-dupe-class-members": "error", // Disallow duplicate class members
        "no-duplicate-imports": ["error", { "includeExports": true }], // Disallow duplicate module imports
        "no-new-symbol": "error", // Disallow new operators with the Symbol object
        "no-restricted-imports": "off", // Disallow specified modules when loaded by import
        "no-this-before-super": "error", // Disallow this/super before calling super() in constructors
        "no-useless-computed-key": "error", // Disallow unnecessary computed property keys in object literals
        "no-useless-constructor": "error", // Disallow unnecessary constructors
        "no-useless-rename": "error", // Disallow renaming import, export, and destructured assignments to the same name
        "no-var": "error", // Require let or const instead of var
        "object-shorthand": ["error", "always"], // Require or disallow method and property shorthand syntax for object literals
        "prefer-arrow-callback": "error", // Require arrow functions as callbacks
        "prefer-const": "error", // Require const declarations for variables that are never reassigned after declared,
        "prefer-destructuring": "off", // Require destructuring from arrays and/or objects
        "prefer-numeric-literals": "error", // Disallow parseInt() in favor of binary, octal, and hexadecimal literals
        "prefer-rest-params": "error", // Require rest parameters instead of arguments
        "prefer-spread": "error", // Require spread operators instead of .apply()
        "prefer-template": "error", // Require template literals instead of string concatenation
        "require-yield": "error", // Require generator functions to contain yield
        "rest-spread-spacing": ["error", "never"], // Enforce spacing between rest and spread operators and their expressions
        "sort-imports": "off", // Enforce sorted import declarations within modules
        "symbol-description": "error", // Require symbol descriptions
        "template-curly-spacing": ["error", "never"], // Require or disallow spacing around embedded expressions of template strings
        "yield-star-spacing": ["error", { "before": false, "after": true }], // Require or disallow spacing around the * in yield* expressions

        // React
        "react/display-name": "off", // Prevent missing displayName in a React component definition
        "react/forbid-component-props": "error", // Forbid certain props on Components
        "react/forbid-elements": "off", // Forbid certain elements
        "react/forbid-prop-types": "error", // Forbid certain propTypes
        "react/forbid-foreign-prop-types": "error", // Forbid foreign propTypes
        "react/no-array-index-key": "error", // Prevent using Array index in key props
        "react/no-children-prop": "error", // Prevent passing children as props
        "react/no-danger": "error", // Prevent usage of dangerous JSX properties
        "react/no-danger-with-children": "error", // Prevent problem with children and props.dangerouslySetInnerHTML
        "react/no-deprecated": "error", // Prevent usage of deprecated methods
        "react/no-did-mount-set-state": "error", // Prevent usage of setState in componentDidMount
        "react/no-did-update-set-state": "error", // Prevent usage of setState in componentDidUpdate
        "react/no-direct-mutation-state": "error", // Prevent direct mutation of this.state
        "react/no-find-dom-node": "error", // Prevent usage of findDOMNode
        "react/no-is-mounted": "error", // Prevent usage of isMounted
        "react/no-multi-comp": "error", // Prevent multiple component definition per file
        "react/no-render-return-value": "error", // Prevent usage of the return value of React.render
        "react/no-set-state": "off", // Prevent usage of setState
        "react/no-string-refs": "error", // Prevent using string references in ref attribute.
        "react/no-unescaped-entities": "error", // Prevent invalid characters from appearing in markup
        "react/no-unknown-property": "error", // Prevent usage of unknown DOM property (fixable)
        "react/no-unused-prop-types": "error", // Prevent definitions of unused prop types
        "react/prefer-es6-class": ["error", "always"], // Enforce ES5 or ES6 class for React Components
        "react/prefer-stateless-function": "off", // Enforce stateless React Components to be written as a pure function
        "react/prop-types": "error", // Prevent missing props validation in a React component definition
        "react/react-in-jsx-scope": "off", // Prevent missing React when using JSX
        "react/require-default-props": "error", // Enforce a defaultProps definition for every prop that is not a required prop
        "react/require-optimization": "off", // Enforce React components to have a shouldComponentUpdate method
        "react/require-render-return": "error", // Enforce ES5 or ES6 class for returning value in render function
        "react/self-closing-comp": "error", // Prevent extra closing tags for components without children (fixable)
        "react/sort-comp": "off", // Enforce component methods order
        "react/sort-prop-types": "off", // Enforce propTypes declarations alphabetical sorting
        "react/style-prop-object": "error", // Enforce style prop value being an object
        "react/void-dom-elements-no-children": "error", // Prevent void DOM elements (e.g. <img />, <br />) from receiving children

        // JSX-specific rules
        "react/jsx-boolean-value": "off", // Enforce boolean attributes notation in JSX (fixable)
        "react/jsx-closing-bracket-location": "error", // Validate closing bracket location in JSX (fixable)
        "react/jsx-curly-spacing": ["error", "never", { "allowMultiline": false }], // Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
        "react/jsx-equals-spacing": ["error", "never"], // Enforce or disallow spaces around equal signs in JSX attributes (fixable)
        "react/jsx-filename-extension": "off", // Restrict file extensions that may contain JSX
        "react/jsx-first-prop-new-line": ["error", "never"], // Enforce position of the first prop in JSX (fixable)
        "react/jsx-handler-names": "error", // Enforce event handler naming conventions in JSX
        "react/jsx-indent": "off", // Validate JSX indentation (fixable)
        "react/jsx-indent-props": "off", // Validate props indentation in JSX (fixable)
        "react/jsx-key": "error", // Validate JSX has key prop when in array or iterator
        "react/jsx-max-props-per-line": "off", // Limit maximum of props on a single line in JSX
        "react/jsx-no-bind": "error", // Prevent usage of .bind() and arrow functions in JSX props
        "react/jsx-no-comment-textnodes": "error", // Prevent comments from being inserted as text nodes
        "react/jsx-no-duplicate-props": "error", // Prevent duplicate props in JSX
        "react/jsx-no-literals": "off", // Prevent usage of unwrapped JSX strings
        "react/jsx-no-target-blank": "error", // Prevent usage of unsafe target='_blank'
        "react/jsx-no-undef": "error", // Disallow undeclared variables in JSX
        "react/jsx-pascal-case": "error", // Enforce PascalCase for user-defined JSX components
        "react/jsx-sort-props": "off", // Enforce props alphabetical sorting
        "react/jsx-space-before-closing": ["error", "always"], // Validate spacing before closing bracket in JSX (fixable)
        "react/jsx-tag-spacing": "error", // Validate whitespace in and around the JSX opening and closing brackets (fixable)
        "react/jsx-uses-react": "error", // Prevent React to be incorrectly marked as unused
        "react/jsx-uses-vars": "error", // Prevent variables used in JSX to be incorrectly marked as unused
        "react/jsx-wrap-multilines": "error" // Prevent missing parentheses around multilines JSX (fixable)
    }
}